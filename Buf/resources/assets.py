# DO NOT EDIT!
# This code was auto generated by the `protoc-gen-pokete-resources-python` plugin,
# part of the pokete project, by <lxgr@protonmail.com>
from typing import TypedDict
from .base import (Item, ItemDict, Poke, PokeDict, Attack, AttackDict, Nature, NatureDict, Weather, WeatherDict, Type, TypeDict, Achievement, AchievementDict, )
from . import (Trainer, TrainerDict, NPC, NPCDict, Obmap, ObmapDict, Station, StationDict, Decoration, DecorationDict, Map, MapDict, )


class BaseAssetsDict(TypedDict):
    items: dict[str, "ItemDict"]
    pokes: dict[str, "PokeDict"]
    attacks: dict[str, "AttackDict"]
    natures: dict[str, "NatureDict"]
    weathers: dict[str, "WeatherDict"]
    types: dict[str, "TypeDict"]
    sub_types: list[str]
    achievements: dict[str, "AchievementDict"]


class BaseAssets:
    def __init__(
        self,
        items: dict[str, "Item"],
        pokes: dict[str, "Poke"],
        attacks: dict[str, "Attack"],
        natures: dict[str, "Nature"],
        weathers: dict[str, "Weather"],
        types: dict[str, "Type"],
        sub_types: list[str],
        achievements: dict[str, "Achievement"]
    ):
        self.items: dict[str, "Item"] = items
        self.pokes: dict[str, "Poke"] = pokes
        self.attacks: dict[str, "Attack"] = attacks
        self.natures: dict[str, "Nature"] = natures
        self.weathers: dict[str, "Weather"] = weathers
        self.types: dict[str, "Type"] = types
        self.sub_types: list[str] = sub_types
        self.achievements: dict[str, "Achievement"] = achievements

    @classmethod
    def from_dict(cls, _d: BaseAssetsDict | None) -> "BaseAssets | None":
        if _d is None:
            return None
        return cls(
            items={i: item for i, item in _d["items"].items()},
            pokes={i: item for i, item in _d["pokes"].items()},
            attacks={i: item for i, item in _d["attacks"].items()},
            natures={i: item for i, item in _d["natures"].items()},
            weathers={i: item for i, item in _d["weathers"].items()},
            types={i: item for i, item in _d["types"].items()},
            sub_types=_d["sub_types"],
            achievements={i: item for i, item in _d["achievements"].items()},
        )


class BDict(TypedDict):
    trainers: list["TrainerDict"]


class B:
    def __init__(
        self,
        trainers: list["Trainer"]
    ):
        self.trainers: list["Trainer"] = trainers

    @classmethod
    def from_dict(cls, _d: BDict | None) -> "B | None":
        if _d is None:
            return None
        return cls(
            trainers=[Trainer.from_dict(i) for i in _d["trainers"]],
        )


class AssetsDict(TypedDict):
    trainers: dict[str, "BDict"]
    n_p_cs: dict[str, "NPCDict"]
    obmaps: dict[str, "ObmapDict"]
    stations: dict[str, "StationDict"]
    decorations: dict[str, "DecorationDict"]
    maps: dict[str, "MapDict"]


class Assets:
    def __init__(
        self,
        trainers: dict[str, "B"],
        n_p_cs: dict[str, "NPC"],
        obmaps: dict[str, "Obmap"],
        stations: dict[str, "Station"],
        decorations: dict[str, "Decoration"],
        maps: dict[str, "Map"]
    ):
        self.trainers: dict[str, "B"] = trainers
        self.n_p_cs: dict[str, "NPC"] = n_p_cs
        self.obmaps: dict[str, "Obmap"] = obmaps
        self.stations: dict[str, "Station"] = stations
        self.decorations: dict[str, "Decoration"] = decorations
        self.maps: dict[str, "Map"] = maps

    @classmethod
    def from_dict(cls, _d: AssetsDict | None) -> "Assets | None":
        if _d is None:
            return None
        return cls(
            trainers={i: item for i, item in _d["trainers"].items()},
            n_p_cs={i: item for i, item in _d["n_p_cs"].items()},
            obmaps={i: item for i, item in _d["obmaps"].items()},
            stations={i: item for i, item in _d["stations"].items()},
            decorations={i: item for i, item in _d["decorations"].items()},
            maps={i: item for i, item in _d["maps"].items()},
        )
