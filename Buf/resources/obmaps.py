# DO NOT EDIT!
# This code was auto generated by the `protoc-gen-pokete-resources-python` plugin,
# part of the pokete project, by <lxgr@protonmail.com>
from typing import TypedDict
from . import (Coords, CoordsDict, )


class DorArgsDict(TypedDict):
    x: int
    y: int
    map: str


class DorArgs:
    def __init__(
        self,
        x: int,
        y: int,
        map: str
    ):
        self.x: int = x
        self.y: int = y
        self.map: str = map

    @classmethod
    def from_dict(cls, _d: DorArgsDict | None) -> "DorArgs | None":
        if _d is None:
            return None
        return cls(
            x=_d["x"],
            y=_d["y"],
            map=_d["map"],
        )


class DorDict(TypedDict):
    x: int
    y: int
    args: "DorArgsDict"


class Dor:
    def __init__(
        self,
        x: int,
        y: int,
        args: "DorArgs"
    ):
        self.x: int = x
        self.y: int = y
        self.args: "DorArgs" = args

    @classmethod
    def from_dict(cls, _d: DorDict | None) -> "Dor | None":
        if _d is None:
            return None
        return cls(
            x=_d["x"],
            y=_d["y"],
            args=DorArgs.from_dict(_d["args"]),
        )


class SpecialDorsDict(TypedDict):
    dor: "CoordsDict"
    shopdor: "CoordsDict"


class SpecialDors:
    def __init__(
        self,
        dor: "Coords",
        shopdor: "Coords"
    ):
        self.dor: "Coords" = dor
        self.shopdor: "Coords" = shopdor

    @classmethod
    def from_dict(cls, _d: SpecialDorsDict | None) -> "SpecialDors | None":
        if _d is None:
            return None
        return cls(
            dor=Coords.from_dict(_d["dor"]),
            shopdor=Coords.from_dict(_d["shopdor"]),
        )


class ObDict(TypedDict):
    x: int
    y: int
    txt: str


class Ob:
    def __init__(
        self,
        x: int,
        y: int,
        txt: str
    ):
        self.x: int = x
        self.y: int = y
        self.txt: str = txt

    @classmethod
    def from_dict(cls, _d: ObDict | None) -> "Ob | None":
        if _d is None:
            return None
        return cls(
            x=_d["x"],
            y=_d["y"],
            txt=_d["txt"],
        )


class ObmapDict(TypedDict):
    hard_obs: dict[str, "ObDict"]
    soft_obs: dict[str, "ObDict"]
    dors: dict[str, "DorDict"]
    special_dors: "SpecialDorsDict | None"
    balls: dict[str, "CoordsDict"]


class Obmap:
    def __init__(
        self,
        hard_obs: dict[str, "Ob"],
        soft_obs: dict[str, "Ob"],
        dors: dict[str, "Dor"],
        special_dors: "SpecialDors | None",
        balls: dict[str, "Coords"]
    ):
        self.hard_obs: dict[str, "Ob"] = hard_obs
        self.soft_obs: dict[str, "Ob"] = soft_obs
        self.dors: dict[str, "Dor"] = dors
        self.special_dors: "SpecialDors | None" = special_dors
        self.balls: dict[str, "Coords"] = balls

    @classmethod
    def from_dict(cls, _d: ObmapDict | None) -> "Obmap | None":
        if _d is None:
            return None
        return cls(
            hard_obs={i: item for i, item in _d["hard_obs"].items()},
            soft_obs={i: item for i, item in _d["soft_obs"].items()},
            dors={i: item for i, item in _d["dors"].items()},
            special_dors=SpecialDors.from_dict(_d.get("special_dors", None)),
            balls={i: item for i, item in _d["balls"].items()},
        )
